#!/usr/bin/env python
"""
This script generates and saves .csv datasets for PPA validation on synthetic data for the brain
model. It instantiates the x-model and the c-model and generates samples from them. The data will
be saved under data/brain/ppa_synthetic.
"""
import json

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

from coordination.model.config_bundle.brain import BrainBundle
from coordination.model.real.brain import BrainModel

T = 50
N = 10
PROCESS_NOISE = 0.01
OBSERVATION_NOISE = 100#1.0
# Position and speed for each subject start with different values
INITIAL_STATE = np.array([[0, 0], [25, 25], [50, 50]])
INITIAL_STATE_GSR = np.array([[50, 5], [10, 1], [20, 2]])

ROOT_DIR = "../data/brain/synthetic"


def get_x_model() -> BrainModel:
    """
    Gets an x-model.

    @return: x-model.
    """
    with open(f"{ROOT_DIR}/config/params/brain_no_coordination_params_dict.json",
              "r") as f:
        bundle = BrainBundle(**json.load(f))
        # bundle.state_space_2d = True
        # Set some parameters for data generation
        bundle.fnirs_sd_a = PROCESS_NOISE
        bundle.fnirs_sd_o = OBSERVATION_NOISE

        bundle.constant_coordination = True
        bundle.initial_coordination_samples = np.zeros((N, T))
        bundle.num_time_steps_in_coordination_scale = T

        bundle.fnirs_mean_a0 = INITIAL_STATE

        return BrainModel(bundle)


def get_c_model(coordination: float) -> BrainModel:
    """
    Gets a c-model.

    @param coordination: value of coordination to fix.
    @return: c-model.
    """
    with open(f"{ROOT_DIR}/config/params/brain_params_dict.json",
              "r") as f:
        bundle = BrainBundle(**json.load(f))
        # bundle.state_space_2d = True
        # Set some parameters for data generation
        bundle.fnirs_sd_a = PROCESS_NOISE
        bundle.fnirs_sd_o = OBSERVATION_NOISE

        bundle.constant_coordination = True
        bundle.initial_coordination_samples = np.ones((N, T)) * coordination
        bundle.num_time_steps_in_coordination_scale = T

        bundle.fnirs_mean_a0 = INITIAL_STATE

        return BrainModel(bundle)


def get_c_model_shift(initial_coordination: float, final_coordination: float) -> BrainModel:
    """
    Gets a c-model with varying coordination.

    @param initial_coordination: value of coordination to fix in the first part.
    @param final_coordination: value of coordination to fix in the second part.
    @return: c-model.
    """
    with open(f"{ROOT_DIR}/config/params/brain_params_dict.json",
              "r") as f:
        bundle = BrainBundle(**json.load(f))
        # bundle.state_space_2d = True
        # Set some parameters for data generation
        bundle.fnirs_sd_a = PROCESS_NOISE
        bundle.fnirs_sd_o = OBSERVATION_NOISE

        bundle.constant_coordination = True
        bundle.initial_coordination_samples = np.ones((N, T)) * initial_coordination
        # Coordination is different in the last 10 time steps
        bundle.initial_coordination_samples[5:] = final_coordination
        bundle.num_time_steps_in_coordination_scale = T

        bundle.fnirs_mean_a0 = INITIAL_STATE

        return BrainModel(bundle)


def get_c_model_plus_gsr(coordination: float) -> BrainModel:
    """
    Gets a c-model with 2 modalities: fnirs and gsr.

    @param coordination: value of coordination to fix.
    @return: c-model.
    """
    with open(f"{ROOT_DIR}/config/params/brain_gsr_params_dict.json",
              "r") as f:
        bundle = BrainBundle(**json.load(f))
        # bundle.state_space_2d = True
        # Set some parameters for data generation
        bundle.fnirs_sd_a = PROCESS_NOISE
        bundle.fnirs_sd_o = OBSERVATION_NOISE
        bundle.gsr_sd_a = PROCESS_NOISE
        bundle.gsr_sd_o = OBSERVATION_NOISE

        bundle.constant_coordination = True
        bundle.initial_coordination_samples = np.ones((N, T)) * coordination
        bundle.num_time_steps_in_coordination_scale = T

        bundle.fnirs_mean_a0 = INITIAL_STATE
        bundle.gsr_mean_a0 = INITIAL_STATE_GSR

        return BrainModel(bundle)


def get_c_plus_cc_model(coordination: float) -> BrainModel:
    """
    Gets a c-model with common cause.

    @param coordination: value of coordination to fix.
    @return: c-model.
    """
    with open(f"{ROOT_DIR}/config/params/brain_params_dict.json",
              "r") as f:
        bundle = BrainBundle(**json.load(f))
        # bundle.state_space_2d = True
        # Set some parameters for data generation
        bundle.fnirs_sd_a = PROCESS_NOISE
        bundle.fnirs_sd_o = OBSERVATION_NOISE

        bundle.constant_coordination = True
        bundle.initial_coordination_samples = np.ones((N, T)) * coordination
        bundle.num_time_steps_in_coordination_scale = T

        bundle.fnirs_mean_a0 = INITIAL_STATE
        bundle.common_cause = True
        bundle.sd_cc = PROCESS_NOISE
        bundle.mean_cc0 = np.array([INITIAL_STATE[0]])

        return BrainModel(bundle)


def get_cc_model() -> BrainModel:
    """
    Gets a cc-model (common cause only).

    @return: cc-model.
    """
    with open(f"{ROOT_DIR}/config/params/brain_params_dict.json",
              "r") as f:
        bundle = BrainBundle(**json.load(f))
        # bundle.state_space_2d = True
        # Set some parameters for data generation
        bundle.fnirs_sd_a = PROCESS_NOISE
        bundle.fnirs_sd_o = OBSERVATION_NOISE

        bundle.constant_coordination = True
        bundle.initial_coordination_samples = np.ones((N, T))
        bundle.num_time_steps_in_coordination_scale = T

        bundle.fnirs_mean_a0 = INITIAL_STATE
        bundle.common_cause = True
        bundle.sd_cc = PROCESS_NOISE
        bundle.mean_cc0 = np.array([INITIAL_STATE[0]])

        return BrainModel(bundle)


def get_c_model_dirichlet(coordination: float) -> BrainModel:
    """
    Gets a c-model-dirichlet.

    @param coordination: value of coordination to fix.
    @return: c-model-dirichlet.
    """
    with open(f"{ROOT_DIR}/config/params/brain_params_dict.json",
              "r") as f:
        bundle = BrainBundle(**json.load(f))
        # bundle.state_space_2d = True
        # Set some parameters for data generation
        bundle.fnirs_sd_a = PROCESS_NOISE
        bundle.fnirs_sd_o = OBSERVATION_NOISE

        bundle.constant_coordination = True
        bundle.initial_coordination_samples = np.zeros((N, 3, T))
        bundle.initial_coordination_samples[:, 0] = np.ones(T) * (1 - coordination)
        bundle.initial_coordination_samples[:, 1] = np.ones(T) * coordination
        bundle.num_time_steps_in_coordination_scale = T
        bundle.mean_uc0_individualism = 1 - coordination
        bundle.mean_uc0 = coordination
        bundle.mean_uc0_common_cause = 0
        bundle.sd_uc_individualism = 0
        bundle.sd_uc = 0
        bundle.sd_uc_common_cause = 0

        bundle.fnirs_mean_a0 = INITIAL_STATE
        bundle.common_cause = True
        bundle.sd_cc = PROCESS_NOISE
        bundle.mean_cc0 = np.array([INITIAL_STATE[0]])

        return BrainModel(bundle)


def get_cc_model_dirichlet(common_cause: float) -> BrainModel:
    """
    Gets a cc-model-dirichlet.

    @param common_cause: value of common cause to fix.
    @return: cc-model-dirichlet.
    """
    with open(f"{ROOT_DIR}/config/params/brain_params_dict.json",
              "r") as f:
        bundle = BrainBundle(**json.load(f))
        # bundle.state_space_2d = True
        # Set some parameters for data generation
        bundle.fnirs_sd_a = PROCESS_NOISE
        bundle.fnirs_sd_o = OBSERVATION_NOISE

        bundle.constant_coordination = True
        bundle.initial_coordination_samples = np.zeros((N, 3, T))
        bundle.initial_coordination_samples[:, 0] = np.ones(T) * (1 - common_cause)
        bundle.initial_coordination_samples[:, 2] = np.ones(T) * common_cause
        bundle.num_time_steps_in_coordination_scale = T
        bundle.mean_uc0_individualism = 1 - common_cause
        bundle.mean_uc0_common_cause = common_cause
        bundle.mean_uc0 = 0
        bundle.sd_uc_individualism = 0
        bundle.sd_uc = 0
        bundle.sd_uc_common_cause = 0

        bundle.fnirs_mean_a0 = INITIAL_STATE
        bundle.common_cause = True
        bundle.sd_cc = PROCESS_NOISE
        bundle.mean_cc0 = np.array([INITIAL_STATE[0]])

        return BrainModel(bundle)


x_model = get_x_model()
c_model_low = get_c_model(0.2)
c_model_shift = get_c_model_shift(0.2, 0.8)
c_model_gsr = get_c_model_plus_gsr(0.2)
c_model_high = get_c_model(0.6)
c_cc_model_low = get_c_plus_cc_model(0.2)
cc_model = get_cc_model()

c_model_low_dirichlet = get_c_model_dirichlet(0.2)
cc_model_low_dirichlet = get_cc_model_dirichlet(0.2)

models = [
    # ("x_data", x_model),
    # ("c_data_low", c_model_low),
    # ("c_model_shift", c_model_shift),
    # ("c_model_gsr", c_model_gsr),
    # ("c_model_high", c_model_high)
    # ("c_cc_data_low", c_cc_model_low),
    # ("cc_data", cc_model)
    ("c_data_low_dirichlet", c_model_low_dirichlet),
    ("cc_data_low_dirichlet", cc_model_low_dirichlet)
]

for data_name, model in models:
    np.random.seed(0)
    samples = model.draw_samples(num_series=10)

    data = []
    for n in range(N):
        entry = {
            "experiment_id": f"exp{n}",
            "fnirs_time_steps_in_coordination_scale":
                samples.component_group_samples[
                    "fnirs_state_space"].time_steps_in_coordination_scale[n].tolist(),
            "s1_d1":
                samples.component_group_samples["fnirs"].values[n][:, 0].tolist(),
            "s1_d2":
                samples.component_group_samples["fnirs"].values[n][:, 1].tolist(),
            "num_time_steps_in_coordination_scale": T
        }
        if "gsr" in data_name:
            entry.update({
                "gsr_time_steps_in_coordination_scale":
                    samples.component_group_samples[
                        "gsr_state_space"].time_steps_in_coordination_scale[n].tolist(),
                "gsr":
                    samples.component_group_samples["gsr"].values[n][:, 0].tolist()
            })

        data.append(entry)

    pd.DataFrame(data).to_csv(f"{ROOT_DIR}/{data_name}.csv", index_label="number")

# Random Data
# Use samples from one of the models to get the metadata. We will replace the actual data with
# random numbers samples independently from N(0,1).
# samples = x_model.draw_samples(num_series=10)
#
# data = []
# for n in range(N):
#     np.random.seed(0)
#     random_values = np.random.rand(
#         *samples.component_group_samples["fnirs"].values[n].shape)
#     data.append(
#         {
#             "experiment_id": f"exp{n}",
#             "fnirs_time_steps_in_coordination_scale":
#                 samples.component_group_samples[
#                     "fnirs_state_space"].time_steps_in_coordination_scale[n].tolist(),
#             "s1_d1": random_values[:, 0].tolist(),
#             "s1_d2": random_values[:, 1].tolist(),
#             "num_time_steps_in_coordination_scale": T
#         }
#     )
#
# pd.DataFrame(data).to_csv(f"{ROOT_DIR}/random_data.csv", index_label="number")
